     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a,b-byte; c-word; e-doubleword; x-qword
    15                                      
    16 00000000 12                          a db 0x12
    17 00000001 10                          b db 0x10
    18 00000002 0010                        c dw 0x1000
    19 00000004 78563412                    e dd 0x12345678
    20 00000008 F0DEBC9A78563412            x dq 0x123456789ABCDEF0
    21                                      
    22                                      
    23                                      ;test var
    24                                      ;a1 db -1
    25                                      ;a2 db 1
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31                                  
    32                                          ;TEST
    33                                          ;mov al, [a1]
    34                                          ;mul byte [a2]
    35                                          
    36                                          
    37                                          ;(a-2)/(b+c)+a*c+e-x      
    38                                    
    39                                          ; bl - byte (a-2)
    40 00000000 8A1D[00000000]                  mov bl, [a]
    41 00000006 80EB02                          sub bl, 2  
    42                                          
    43                                          ; cx - word (b+c)
    44 00000009 A0[01000000]                    mov al, [b]
    45 0000000E 6698                            cbw
    46 00000010 660305[02000000]                add ax, [c]
    47 00000017 6689C1                          mov cx, ax
    48                                          
    49                                          ; dx:ax - dword (a-2) / word (b+c)
    50 0000001A 88D8                            mov al, bl
    51 0000001C 6698                            cbw 
    52 0000001E 6699                            cwd
    53 00000020 66F7F9                          idiv WORD cx
    54                                          
    55                                          ; eax - word ax (from dx:ax)
    56 00000023 98                              cwde
    57                                          
    58 00000024 89C3                            mov ebx, eax
    59                                          
    60                                             
    61                                          ; dx:ax - dword (a * c)
    62 00000026 A0[00000000]                    mov al, [a]
    63 0000002B 6698                            cbw
    64 0000002D 66F72D[02000000]                imul WORD [c]
    65                                          
    66                                          ; eax - dx:ax
    67                                          
    68                                          ;with shift
    69                                          ;mov cx, dx   
    70                                          ;shl ecx, 16
    71                                          ;mov cx, ax 
    72                                          
    73                                          ;or
    74                                          
    75 00000034 6652                            push dx
    76 00000036 6650                            push ax
    77 00000038 58                              pop eax
    78 00000039 89C1                            mov ecx, eax
    79                                             
    80                                          
    81                                          ; ebx - (a-2)/(b+c)+a*c+e
    82 0000003B 01CB                            add ebx, ecx
    83 0000003D 031D[04000000]                  add ebx, [e]
    84                                          
    85                                          ; edx:eax - qword ebx
    86 00000043 89D8                            mov eax, ebx
    87 00000045 99                              cdq 
    88                                          
    89                                          ; ebx:ecx - qword x
    90 00000046 8B0D[08000000]                  mov ecx, [x]
    91 0000004C 8B1D[0C000000]                  mov ebx, [x+4]
    92                                          
    93                                          ; edx:eax - qword (ebx + x)
    94 00000052 29C8                            sub eax, ecx
    95 00000054 19DA                            sbb edx, ebx
    96                                          
    97                                          
    98                                          
    99                                          
   100                                          
   101                                          
   102                                          
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
   109                                          
   110                                          
   111                                          
   112                                          
   113                                          
   114                                          
   115                                          
   116                                          
   117                                          
   118                                          
   119                                          
   120                                          
   121                                         
   122                                          
   123                                          
   124                                      
   125                                          ; exit(0)
   126 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   127 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
